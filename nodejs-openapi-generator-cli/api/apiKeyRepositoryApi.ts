/**
 * AIOZ-AI-PLATFORM API
 * API for AIOZ AI Platform
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ResponseErrorResponse } from '../model/responseErrorResponse';
import { ResponseFailResponse } from '../model/responseFailResponse';
import { ResponseGetCommitHistoryResponse } from '../model/responseGetCommitHistoryResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost/api/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ApiKeyRepositoryApiApiKeys {
    BearerAuth,
}

export class ApiKeyRepositoryApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'BearerAuth': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ApiKeyRepositoryApiApiKeys, value: string) {
        (this.authentications as any)[ApiKeyRepositoryApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary Get commit history by repository name and branch name by api key
     * @param ownerUsername repository\&#39;s owner
     * @param repositoryName repository\&#39;s name
     * @param sha Sha is the sha of the commit (optional)
     * @param xApiKey api-key
     * @param page Page is the page number (default: 1) (optional)
     * @param pageSize PageSize is the page size (default: 10) (optional)
     * @param path Path is the path of the file (optional)
     * @param repoType 
     */
    public async apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet (ownerUsername: string, repositoryName: string, sha: string, xApiKey?: string, page?: number, pageSize?: number, path?: string, repoType?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ResponseGetCommitHistoryResponse;  }> {
        const localVarPath = this.basePath + '/api-key/repository/{ownerUsername}/{repositoryName}/commit/history'
            .replace('{' + 'ownerUsername' + '}', encodeURIComponent(String(ownerUsername)))
            .replace('{' + 'repositoryName' + '}', encodeURIComponent(String(repositoryName)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'ownerUsername' is not null or undefined
        if (ownerUsername === null || ownerUsername === undefined) {
            throw new Error('Required parameter ownerUsername was null or undefined when calling apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet.');
        }

        // verify required parameter 'repositoryName' is not null or undefined
        if (repositoryName === null || repositoryName === undefined) {
            throw new Error('Required parameter repositoryName was null or undefined when calling apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet.');
        }

        // verify required parameter 'sha' is not null or undefined
        if (sha === null || sha === undefined) {
            throw new Error('Required parameter sha was null or undefined when calling apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet.');
        }

        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (path !== undefined) {
            localVarQueryParameters['path'] = ObjectSerializer.serialize(path, "string");
        }

        if (repoType !== undefined) {
            localVarQueryParameters['repoType'] = ObjectSerializer.serialize(repoType, "string");
        }

        if (sha !== undefined) {
            localVarQueryParameters['sha'] = ObjectSerializer.serialize(sha, "string");
        }

        localVarHeaderParams['x-api-key'] = ObjectSerializer.serialize(xApiKey, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ResponseGetCommitHistoryResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ResponseGetCommitHistoryResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
